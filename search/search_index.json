{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yii2 Multiple input widget.","text":"<p>Yii2 widget for handle multiple inputs for an attribute of model and tabular input for batch of models.</p> <p> </p>"},{"location":"#latest-release","title":"Latest release","text":"<p>The latest stable version of the extension is v2.25.0 Follow the instruction for upgrading from previous versions</p>"},{"location":"clonning/","title":"Clonning","text":"<pre><code>use unclead\\multipleinput\\MultipleInput;\n\n...\n\n$form-&gt;field($model, 'products')-&gt;widget(MultipleInput::className(), [\n    'max' =&gt; 10,\n    'cloneButton' =&gt; true,\n    'columns' =&gt; [\n        [\n            'name'  =&gt; 'product_id',\n            'type'  =&gt; 'dropDownList',\n            'title' =&gt; 'Special Products',\n            'defaultValue' =&gt; 1,\n            'items' =&gt; [\n                1 =&gt; 'id: 1, price: $19.99, title: product1',\n                2 =&gt; 'id: 2, price: $29.99, title: product2',\n                3 =&gt; 'id: 3, price: $39.99, title: product3',\n                4 =&gt; 'id: 4, price: $49.99, title: product4',\n                5 =&gt; 'id: 5, price: $59.99, title: product5',\n            ],\n        ],\n        [\n            'name'  =&gt; 'time',\n            'type'  =&gt; DateTimePicker::className(),\n            'title' =&gt; 'due date',\n            'defaultValue' =&gt; date('d-m-Y h:i')\n        ],\n        [\n            'name'  =&gt; 'count',\n            'title' =&gt; 'Count',\n            'defaultValue' =&gt; 1,\n            'enableError' =&gt; true,\n            'options' =&gt; [\n                'type' =&gt; 'number',\n                'class' =&gt; 'input-priority',\n            ]\n        ]\n    ]\n])-&gt;label(false);\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Widget support the following options that are additionally recognized over and above the configuration options in the InputWidget.</p>"},{"location":"configuration/#base-options","title":"Base options","text":"<p>theme string: specify the theme of the widget. Available 2 themes:</p> <ul> <li><code>default</code> with only widget css classes</li> <li><code>bs</code> (twitter bootstrap) theme with additional BS ccs classes). </li> </ul> <p>Default value is <code>bs</code></p> <p>max integer: maximum number of rows. If not set will default to unlimited</p> <p>min integer: minimum number of rows. Set to <code>0</code> if you need the empty list in case you don't have any data</p> <p>prepend boolean: add a new row to the beginning of the list, not to the end</p> <p>attributeOptions array: client-side attribute options, e.g. enableAjaxValidation. You may use this property in case when you use widget without a model, since in this case widget is not able to detect client-side options automatically</p> <p>addButtonPosition integer|array: the position(s) of <code>add</code> button. This can be <code>MultipleInput::POS_HEADER</code>, <code>MultipleInput::POS_ROW</code>, <code>MultipleInput::POS_ROW_BEGIN</code> or <code>MultipleInput::POS_FOOTER</code>.</p> <p>addButtonOptions array: the HTML options for <code>add</code> button. Can contains <code>class</code> and <code>label</code> keys</p> <p>removeButtonOptions array: the HTML options for <code>remove</code> button. Can contains <code>class</code> and <code>label</code> keys</p> <p>cloneButton bool: whether need to enable clone buttons or not</p> <p>cloneButtonOptions array: the HTML options for <code>remove</code> button. Can contains <code>class</code> and <code>label</code> keys</p> <p>data array: array of values in case you use widget without model</p> <p>models array: the list of models. Required in case you use <code>TabularInput</code> widget</p> <p>allowEmptyList boolean: whether to allow the empty list. Deprecateed use the <code>min</code> option instead</p> <p>columnClass string: the name of column class. You can specify your own class to extend base functionality. Defaults to <code>unclead\\multipleinput\\MultipleInputColumn</code> for <code>MultipleInput</code> and <code>unclead\\multipleinput\\TabularColumn</code> for <code>TabularInput</code>.</p> <p>rendererClass string: the name of renderer class. You can specify your own class to extend base functionality. Defaults to <code>unclead\\multipleinput\\renderers\\TableRenderer</code>.</p> <p>columns array: the row columns configuration where you can set the properties which is described below</p> <p>rowOptions array|\\Closure: the HTML attributes for the table body rows. This can be either an array specifying the common HTML attributes for all body rows, or an anonymous function that returns an array of the HTML attributes. It should have the following signature:</p> <pre><code>function ($model, $index, $context)\n</code></pre> <ul> <li><code>$model</code>: the current data model being rendered</li> <li><code>$index</code>: the zero-based index of the data model in the model array</li> <li><code>$context</code>: the widget object</li> </ul> <p>sortable bool: whether need to enable sorting or not</p> <p>modelClass string: a class of model which is used to render <code>TabularInput</code>. You must specify this property when a list of <code>models</code> is empty. If this property is not specified the widget will detect it based on a class of <code>models</code></p> <p>extraButtons string|\\Closure: the HTML content that will be rendered after the buttons. It can be either string or an anonymous function that returns a string which will be treated as HTML content. It should have the following signature:</p> <pre><code>function ($model, $index, $context)\n</code></pre> <ul> <li><code>$model</code>: the current data model being rendered</li> <li><code>$index</code>: the zero-based index of the data model in the model array</li> <li><code>$context</code>: the MultipleInput widget object</li> </ul> <p>layoutConfig array: CSS grid classes for horizontal layout (only supported for <code>ListRenderer</code> class). This must be an array with these keys:</p> <ul> <li><code>'offsetClass'</code>: the offset grid class to append to the wrapper if no label is rendered</li> <li><code>'labelClass'</code>: the label grid class</li> <li><code>'wrapperClass'</code>: the wrapper grid class</li> <li><code>'errorClass'</code>: the error grid class</li> </ul> <p>showGeneralError bool: whether need to show error message for main attribute, when you don't want to validate particular input and want to validate a filed in general.</p>"},{"location":"configuration/#column-options","title":"Column options","text":"<p>name string: input name. Required options</p> <p>type string: type of the input. If not set will default to <code>textInput</code>. Read more about the types described below</p> <p>title string: the column title</p> <p>value Closure: you can set it to an anonymous function with the following signature:</p> <pre><code>function($data) {}\n</code></pre> <p>defaultValue string: default value of input</p> <p>items array|Closure: the items for input with type dropDownList, listBox, checkboxList, radioList or anonymous function which return array of items and has the following signature:</p> <pre><code>function($data) {}\n</code></pre> <p>options array|Closure: the HTML attributes for the input, you can set it as array or an anonymous function with the following signature:</p> <pre><code>function($data) {}\n</code></pre> <p>headerOptions array: the HTML attributes for the header cell</p> <p>enableError boolean: whether to render inline error for the input. Default to <code>false</code></p> <p>errorOptions array: the HTMl attributes for the error tag</p> <p>nameSuffix string: the unique prefix for attribute's name to avoid id duplication e.g. in case of using several copies of the widget on a page and one column is a Select2 widget</p> <p>tabindex integer: use it to customize a form element <code>tabindex</code></p> <p>attributeOptions array: client-side options of the attribute, e.g. enableAjaxValidation. You can use this property for custom configuration of the column (attribute). By default, the column will use options which are defined on widget level.</p> <p>_Supported versions &gt;= 2.1.0</p> <p>columnOptions array|\\Closure: the HTML attributes for the indivdual table body column. This can be either an array specifying the common HTML attributes for indivdual body column, or an anonymous function that returns an array of the HTML attributes. </p> <p>It should have the following signature:</p> <pre><code>function ($model, $index, $context)\n</code></pre> <ul> <li><code>$model</code>: the current data model being rendered</li> <li><code>$index</code>: the zero-based index of the data model in the model array</li> <li><code>$context</code>: the widget object</li> </ul> <p>Supported versions &gt;= 2.18.0</p> <p>inputTemplate string: the template of input for customize view. Default is <code>{input}</code>.</p> <p>Example</p> <p><code>&lt;div class=\"input-group\"&gt;&lt;span class=\"input-group-addon\"&gt;&lt;i class=\"fas fa-mobile-alt\"&gt;&lt;/i&gt;&lt;/span&gt;{input}&lt;/div&gt;</code></p>"},{"location":"configuration/#input-types","title":"Input types","text":"<p>Each column in a row can has their own type. Widget supports:</p> <ul> <li>all yii2 html input types:</li> <li><code>textInput</code></li> <li><code>dropDownList</code></li> <li><code>radioList</code></li> <li><code>textarea</code></li> <li>For more detail look at Html helper class</li> <li>input widget (widget that extends from <code>InputWidget</code> class). For example, <code>yii\\widgets\\MaskedInput</code></li> <li><code>static</code> to output a static HTML content</li> </ul> <p>For using widget as column input you may use the following code:</p> <pre><code>echo $form-&gt;field($model, 'phones')-&gt;widget(MultipleInput::className(), [\n...\n    'columns' =&gt; [\n        ...\n        [\n            'name'  =&gt; 'phones',\n            'title' =&gt; $model-&gt;getAttributeLabel('phones'),\n            'type' =&gt; \\yii\\widgets\\MaskedInput::className(),\n            'options' =&gt; [\n                'class' =&gt; 'input-phone',\n                'mask' =&gt; '999-999-99-99',\n            ],\n        ],\n    ],\n])-&gt;label(false);\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":"<p>I found this small guide here https://stackoverflow.com/a/51849747 and I think it is a good example of basic usage of the widget</p>"},{"location":"getting-started/#question","title":"Question","text":"<p>I want to generate a different number of rows with values from my database. How can I do this?</p> <p>I can design my columns in view and edit data manually after a page was generated. But miss how to program the number of rows and their values in the view.</p> <p>My code is as follows:</p> <pre><code> &lt;?= $form-&gt;field($User, 'User')-&gt;widget(MultipleInput::className(), [\n        'min' =&gt; 0,\n        'max' =&gt; 4,\n        'columns' =&gt; [\n            [\n                'name'  =&gt; 'name',\n                'title' =&gt; 'Name',\n                'type' =&gt; 'textInput',\n                'options' =&gt; [\n                    'onchange' =&gt; $onchange,\n                ],\n            ],\n            [\n                'name'  =&gt; 'birth',\n                'type'  =&gt; \\kartik\\date\\DatePicker::className(),\n                'title' =&gt; 'Birth',\n                'value' =&gt; function($data) {\n                    return $data['day'];\n                },\n\n                'options' =&gt; [\n                    'pluginOptions' =&gt; [\n                        'format' =&gt; 'dd.mm.yyyy',\n                        'todayHighlight' =&gt; true\n                    ]\n                ]\n            ],\n\n        ]\n        ])-&gt;label(false);\n</code></pre> <p>How can I make (for example) 8 rows with different values, and also have the ability to edit/remove/update some of them?</p>"},{"location":"getting-started/#answer","title":"Answer","text":"<p>You need to look into the documentation as it says that you need to assign a separate field into the model which will store all the schedule in form of JSON and then provide it back to the field when editing/updating the model.</p> <p>You have not added the appropriate model to verify how are you creating the field User in your given case above. so, I will try to create a simple example that will help you implement it in your scenario.</p> <p>For Example.</p> <p>You have to store a user in the database along with his favorite books.</p> <pre><code>User\nid, name, email\n\nBooks\nid, name\n</code></pre> <p>Create a field/column in your User table with the name schedule of type text, you can write a migration or add manually. Add it to the rules in the User model as safe.</p> <p>like below</p> <pre><code>public function rules() {\n    return [\n        ....//other rules\n        [ [ 'schedule'] , 'safe' ]\n    ];\n}\n</code></pre> <p>Add the widget to the newly created column in ActiveForm</p> <pre><code>echo $form-&gt;field($model,'schedule')-&gt;widget(MultipleInput::class,[\n    'max' =&gt; 4,\n    'columns' =&gt; [\n        [\n            'name'  =&gt; 'book_id',\n            'type'  =&gt; 'dropDownList',\n            'title' =&gt; 'Book',\n            'items' =&gt; ArrayHelper::map( Books::find()-&gt;asArray()-&gt;all (),'id','name'),\n        ],\n    ]\n\n]);\n</code></pre> <p>When saving the User model convert the array to JSON string</p> <pre><code>if( Yii::$app-&gt;request-&gt;isPost &amp;&amp; $model-&gt;load(Yii::$app-&gt;request-&gt;post()) ){\n    $model-&gt;schedule = \\yii\\helpers\\Json::encode($model-&gt;schedule);\n    $model-&gt;save();\n}\n</code></pre> <p>Override the afterFind() of the User model to covert the JSON back to the array before loading the form</p> <pre><code>public function afterFind() {\n    parent::afterFind();\n    $this-&gt;schedule = \\yii\\helpers\\Json::decode($this-&gt;schedule);\n}\n</code></pre> <p>Now when saved the schedule field against the current user will have the JSON for the selected rows for the books, as many selected, for example, if I saved three books having ids(1,2,3) then it will have JSON</p> <pre><code>{\n  \"0\": {\n    \"book_id\": \"1\"\n  },\n  \"2\": {\n    \"book_id\": \"2\"\n  },\n  \"3\": {\n    \"book_id\": \"3\"\n  }\n}\n</code></pre> <p>The above JSON will be converted to an array in the afterFind() so that the widget loads the saved schedule when you EDIT the record.</p> <p>Now go to your update page or edit the newly saved model you will see the books loaded automatically.</p>"},{"location":"icons/","title":"Using other icon libraries","text":"<p>Multiple input and Tabular input widgets now support FontAwesome and indeed any other icon library you chose to integrate into your project.</p> <p>To take advantage of this, please proceed as follows:</p> <ol> <li>Include the preferred icon library in your project. If you wish to use font awesome, you can use the included FontAwesomeAsset which will integrate the free fa from their CDN;</li> <li>Add a mapping for your preferred icon library if it is not in the <code>iconMap</code> array of the widget, like the following;</li> </ol> <pre><code>public $iconMap = [\n    'glyphicons' =&gt; [\n        'drag-handle' =&gt; 'glyphicon glyphicon-menu-hamburger',\n        'remove' =&gt; 'glyphicon glyphicon-remove',\n        'add' =&gt; 'glyphicon glyphicon-plus',\n        'clone' =&gt; 'glyphicon glyphicon-duplicate',\n    ],\n    'fa' =&gt; [\n        'drag-handle' =&gt; 'fa fa-bars',\n        'remove' =&gt; 'fa fa-times',\n        'add' =&gt; 'fa fa-plus',\n        'clone' =&gt; 'fa fa-files-o',\n    ],\n    'my-amazing-icons' =&gt; [\n        'drag-handle' =&gt; 'my my-bars',\n        'remove' =&gt; 'my my-times',\n        'add' =&gt; 'my my-plus',\n        'clone' =&gt; 'my my-files',\n    ]\n];\n</code></pre> <ol> <li>Set the preferred icon source</li> </ol> <pre><code>    public $iconSource = 'my-amazing-icons';\n</code></pre> <p>If you do none of the above, the default behavior which assumes you are using <code>glyphicons</code> is retained.</p>"},{"location":"installation/","title":"Installation","text":"<p>The preferred way to install this extension is through composer.</p> <p>Either run</p> <pre><code>php composer.phar require  unclead/yii2-multiple-input \"~2.0\"\n</code></pre> <p>or add</p> <pre><code>\"unclead/yii2-multiple-input\": \"~2.0\"\n</code></pre> <p>to the <code>require</code>section of your <code>composer.json</code> file.</p>"},{"location":"javascript-events/","title":"Javascript events","text":"<p>This widget has following events:</p> <ul> <li><code>afterInit</code>: triggered after initialization</li> <li><code>afterAddRow</code>: triggered after new row insertion</li> <li><code>beforeDeleteRow</code>: triggered before the row removal</li> <li><code>afterDeleteRow</code>: triggered after the row removal</li> <li><code>afterDropRow</code>: triggered after drop the row when sortable mode is on</li> </ul> <p>Example</p> <pre><code>jQuery('#multiple-input').on('afterInit', function(){\n    console.log('calls on after initialization event');\n}).on('beforeAddRow', function(e, row, currentIndex) {\n    console.log('calls on before add row event');\n}).on('afterAddRow', function(e, row, currentIndex) {\n    console.log('calls on after add row event');\n}).on('beforeDeleteRow', function(e, row, currentIndex){\n    // row - HTML container of the current row for removal.\n    // For TableRenderer it is tr.multiple-input-list__item\n    console.log('calls on before remove row event.');\n    return confirm('Are you sure you want to delete row?')\n}).on('afterDeleteRow', function(e, row, currentIndex){\n    console.log('calls on after remove row event');\n    console.log(row);\n}).on('afterDropRow', function(e, item){       \n    console.log('calls on after drop row', item);\n});\n</code></pre>"},{"location":"javascript-events/#javascript-operations","title":"JavaScript operations","text":""},{"location":"javascript-events/#add","title":"add","text":"<p>Adding new row with specified settings.</p> <p>Input arguments:</p> <ul> <li>object - values for inputs, can be filled with  tags for dynamically added options for select (for ajax select).</li> </ul> <p>Example:</p> <pre><code>$('#multiple-input').multipleInput('add', {first: 10, second: '&lt;option value=\"2\" selected=\"selected\"&gt;second&lt;/option&gt;'});\n</code></pre>"},{"location":"javascript-events/#remove","title":"remove","text":"<p>Remove row with specified index.</p> <p>Input arguments:</p> <ul> <li>integer - row number for removing, if not specified then removes last row.</li> </ul> <p>Example:</p> <pre><code>$('#multiple-input').multipleInput('remove', 2);\n</code></pre>"},{"location":"javascript-events/#clear","title":"clear","text":"<p>Remove all rows</p> <pre><code>$('#multiple-input').multipleInput('clear');\n</code></pre>"},{"location":"javascript-events/#option","title":"option","text":"<p>Get or set a particular option</p> <p>Input arguments:</p> <ul> <li>string - a name of an option</li> <li>mixed - a value of an option (optional). If specified will be used as a new value of an option;</li> </ul> <p>Example:</p> <pre><code>$('#multiple-input').multipleInput('option', 'max');\n$('#multiple-input').multipleInput('option', 'max', 10);\n</code></pre>"},{"location":"renderers/","title":"Renderers","text":"<p>Currently widget supports three type of renderers</p>"},{"location":"renderers/#tablerenderer","title":"TableRenderer","text":"<p>This renderer is enabled by default.</p>"},{"location":"renderers/#listrenderer","title":"ListRenderer","text":"<p>To enable this renderer you have to use an option <code>rendererClass</code></p> <pre><code>&lt;?php\necho $form-&gt;field($model, 'schedule')-&gt;widget(MultipleInput::className(), [\n    'rendererClass' =&gt; \\unclead\\multipleinput\\renderers\\ListRenderer::className(),\n    'max' =&gt; 4,\n    'allowEmptyList' =&gt; true,\n    'rowOptions' =&gt; function($model) {\n        $options = [];\n\n        if ($model['priority'] &gt; 1) {\n            $options['class'] = 'danger';\n        }\n        return $options;\n    },\n</code></pre>"},{"location":"renderers/#divrenderer","title":"DivRenderer","text":"<p>To enable this renderer you have to use an option <code>rendererClass</code></p> <pre><code>&lt;?php\necho $form-&gt;field($model, 'schedule')-&gt;widget(MultipleInput::className(), [\n    'rendererClass' =&gt; \\unclead\\multipleinput\\renderers\\ListRenderer::class,\n    'addButtonPosition' =&gt; MultipleInput::POS_ROW, // show add button inside of the row\n    'extraButtons' =&gt; function ($model, $index, $context) {\n        if ($index === 0) {\n            return Html::tag('div', Yii::t('object', 'Add object'), ['class' =&gt; 'mi-after-add']);\n        }\n\n        return Html::tag('div', Yii::t('object', 'Remove object'), ['class' =&gt; 'mi-after-remove']);\n    },\n    'layoutConfig' =&gt; [\n        'offsetClass' =&gt; 'col-md-offset-2',\n        'labelClass' =&gt; 'col-md-2',\n        'wrapperClass' =&gt; 'col-md-6',\n        'errorClass' =&gt; 'col-md-offset-2 col-md-6',\n        'buttonActionClass' =&gt; 'col-md-offset-1 col-md-2',\n    ],\n...\n</code></pre>"},{"location":"tips-and-tricks/","title":"Tips and tricks","text":""},{"location":"tips-and-tricks/#how-to-customize-buttons","title":"How to customize buttons","text":"<p>You can customize <code>add</code> and <code>remove</code> buttons via <code>addButtonOptions</code> and <code>removeButtonOptions</code>. Here is a simple example of how you can use those options:</p> <pre><code>    echo $form-&gt;field($model, 'emails')-&gt;widget(MultipleInput::className(), [\n        'max' =&gt; 5,\n        'addButtonOptions' =&gt; [\n            'class' =&gt; 'btn btn-success',\n            'label' =&gt; 'add' // also you can use html code\n        ],\n        'removeButtonOptions' =&gt; [\n            'label' =&gt; 'remove'\n        ]\n    ])\n    -&gt;label(false);\n</code></pre>"},{"location":"tips-and-tricks/#how-to-add-content-after-the-buttons","title":"How to add content after the buttons","text":"<p>You can add html content after <code>add</code> and <code>remove</code> buttons via <code>extraButtons</code>.</p> <pre><code>    echo $form-&gt;field($model, 'field')-&gt;widget(MultipleInput::className(), [\n        'rendererClass' =&gt; \\unclead\\multipleinput\\renderers\\ListRenderer::class,\n        'extraButtons' =&gt; function ($model, $index, $context) {\n            return Html::tag('span', '', ['class' =&gt; \"btn-show-hide-{$index} glyphicon glyphicon-eye-open btn btn-info\"]);\n        },\n    ])\n    -&gt;label(false);\n</code></pre>"},{"location":"tips-and-tricks/#work-with-an-empty-list","title":"Work with an empty list","text":"<p>In some cases, you need to have the ability to delete all rows in the list. For this purpose, you can use option <code>allowEmptyList</code> like in the example below:</p> <pre><code>    echo $form-&gt;field($model, 'emails')-&gt;widget(MultipleInput::className(), [\n        'max' =&gt; 5,\n        'allowEmptyList' =&gt; true\n    ])\n    -&gt;label(false);\n</code></pre> <p>Also, you can set <code>0</code> in <code>min</code> option if you don't need the first blank row when data is empty.</p>"},{"location":"tips-and-tricks/#guess-column-title","title":"Guess column title","text":"<p>Sometimes you can use the widget without defining columns but you want to have the column header of the table. In this case, you can use the option <code>enableGuessTitle</code>  like in the example below:</p> <pre><code>    echo $form-&gt;field($model, 'emails')-&gt;widget(MultipleInput::className(), [\n        'max' =&gt; 5,\n        'allowEmptyList' =&gt; true,\n        'enableGuessTitle' =&gt; true\n    ])\n    -&gt;label(false);\n</code></pre>"},{"location":"tips-and-tricks/#ajax-loading-of-a-widget","title":"Ajax loading of a widget","text":"<p>Assume you want to load a widget via ajax and then show it inside the modal window. In this case, you MUST:</p> <ul> <li>Ensure that you specified the ID of the widget otherwise the widget will get a random ID and it can be the same as the ID of others elements on the page.</li> <li>Ensure that you use the widget inside ActiveForm because it works incorrectly in this case.</li> </ul>"},{"location":"tips-and-tricks/#use-of-a-widgets-placeholder","title":"Use of a widget's placeholder","text":"<p>You can use a placeholder <code>{multiple_index}</code> in a widget configuration, e.g. for implementation of dependent drop-down lists.</p> <pre><code>    &lt;?= $form-&gt;field($model, 'field')-&gt;widget(MultipleInput::className(), [\n            'id' =&gt; 'my_id',\n            'allowEmptyList' =&gt; false,\n            'rowOptions' =&gt; [\n                'id' =&gt; 'row{multiple_index_my_id}',\n            ],\n            'columns' =&gt; [\n                [\n                    'name'  =&gt; 'category',\n                    'type'  =&gt; 'dropDownList',\n                    'title' =&gt; 'Category',\n                    'defaultValue' =&gt; '1',\n                    'items' =&gt; [\n                        '1' =&gt; 'Test 1',\n                        '2' =&gt; 'Test 2',\n                        '3' =&gt; 'Test 3',\n                        '4' =&gt; 'Test 4',\n                    ],\n                    'options' =&gt; [\n                        'onchange' =&gt; &lt;&lt;&lt; JS\n$.post(\"list?id=\" + $(this).val(), function(data){\n    console.log(data);\n    $(\"select#subcat-{multiple_index_my_id}\").html(data);\n});\nJS\n                    ],\n                ],\n                [\n                    'name'  =&gt; 'subcategory',\n                    'type'  =&gt; 'dropDownList',\n                    'title' =&gt; 'Subcategory',\n                    'items' =&gt; [],\n                    'options'=&gt; [\n                        'id' =&gt; 'subcat-{multiple_index_my_id}'\n                    ],\n                ],\n            ]\n    ]);\n    ?&gt;\n</code></pre> <p>Important Ensure that you added ID of widget to a base placeholder <code>multiple_index</code></p>"},{"location":"tips-and-tricks/#custom-index-of-the-row","title":"Custom index of the row","text":"<p>Assume that you want to set a specific index for each row. In this case, you can pass the <code>data</code> attribute as an associative array as in the example below:</p> <pre><code>    &lt;?= $form-&gt;field($model, 'field')-&gt;widget(MultipleInput::className(), [\n            'allowEmptyList' =&gt; false,\n            'data' =&gt; [\n                3 =&gt; [\n                    'day'       =&gt; '27.02.2015',\n                    'user_id'   =&gt; 31,\n                    'priority'  =&gt; 1,\n                    'enable'    =&gt; 1\n                ],\n\n                'some-key' =&gt; [\n                    'day'       =&gt; '27.02.2015',\n                    'user_id'   =&gt; 33,\n                    'priority'  =&gt; 2,\n                    'enable'    =&gt; 0\n                ],\n            ]\n\n    ...\n</code></pre>"},{"location":"tips-and-tricks/#embedded-multipleinput-widget","title":"Embedded MultipleInput widget","text":"<p>You can use nested <code>MultipleInput</code> as in the example below:</p> <pre><code>echo MultipleInput::widget([\n    'model' =&gt; $model,\n    'attribute' =&gt; 'questions',\n    'attributeOptions' =&gt; $commonAttributeOptions,\n    'columns' =&gt; [\n        [\n            'name' =&gt; 'question',\n            'type' =&gt; 'textarea',\n        ],\n        [\n            'name' =&gt; 'answers',\n            'type'  =&gt; MultipleInput::class,\n            'options' =&gt; [\n                'attributeOptions' =&gt; $commonAttributeOptions,\n                'columns' =&gt; [\n                    [\n                        'name' =&gt; 'right',\n                        'type' =&gt; MultipleInputColumn::TYPE_CHECKBOX\n                    ],\n                    [\n                        'name' =&gt; 'answer'\n                    ]\n                ]\n            ]\n        ]\n    ],\n]);\n</code></pre> <p>But in this case, you have to pass <code>attributeOptions</code> to the widget otherwise, you will not be able to use ajax or client-side validation of data.</p>"},{"location":"tips-and-tricks/#client-validation","title":"Client validation","text":"<p>Apart from ajax validation, you can use client validation but in this case, you MUST set property <code>form</code>. Also, ensure that you set <code>enableClientValidation</code> to <code>true</code> value in property <code>attributeOptions</code>. If you want to use client validation for a particular column you can use the property <code>attributeOptions</code>. An example of using client validation is listed below:</p> <pre><code>&lt;?= TabularInput::widget([\n    'models' =&gt; $models,\n    'form' =&gt; $form,\n    'attributeOptions' =&gt; [\n        'enableAjaxValidation' =&gt; true,\n        'enableClientValidation' =&gt; false,\n        'validateOnChange' =&gt; false,\n        'validateOnSubmit' =&gt; true,\n        'validateOnBlur' =&gt; false,\n    ],\n    'columns' =&gt; [\n        [\n            'name' =&gt; 'id',\n            'type' =&gt; TabularColumn::TYPE_HIDDEN_INPUT\n        ],\n        [\n            'name' =&gt; 'title',\n            'title' =&gt; 'Title',\n            'type' =&gt; TabularColumn::TYPE_TEXT_INPUT,\n            'attributeOptions' =&gt; [\n                'enableClientValidation' =&gt; true,\n                'validateOnChange' =&gt; true,\n            ],\n            'enableError' =&gt; true\n        ],\n        [\n            'name' =&gt; 'description',\n            'title' =&gt; 'Description',\n        ],\n    ],\n]) ?&gt;\n</code></pre> <p>In the example above we use client validation for column <code>title</code> and ajax validation for column <code>description</code>. As you can seee we also enabled <code>validateOnChange</code> for column <code>title</code> thus you can use all client-side options from the <code>ActiveField</code> class.</p>"},{"location":"usage/","title":"Usage","text":"<p>You can find the source code of examples here</p>"},{"location":"usage/#one-column","title":"One column","text":"<p>For example, your application contains the model <code>User</code> that has the related model <code>UserEmail</code> You can add virtual attribute <code>emails</code> for collect emails from a form and then you can save them to the database.</p> <p>In this case, you can use <code>yii2-multiple-input</code> widget for supporting multiple inputs how to describe below.</p> <p>First of all, we have to declare a virtual attribute in the model</p> <pre><code>class ExampleModel extends Model\n{\n    /**\n     * @var array virtual attribute for keeping emails\n     */\n    public $emails;\n</code></pre> <p>Then we have to use <code>MultipleInput</code> widget for rendering form field in the view file</p> <pre><code>use yii\\bootstrap\\ActiveForm;\nuse unclead\\multipleinput\\MultipleInput;\nuse unclead\\multipleinput\\examples\\models\\ExampleModel;\nuse yii\\helpers\\Html;\n\n/* @var $this \\yii\\base\\View */\n/* @var $model ExampleModel */\n?&gt;\n\n&lt;?php $form = ActiveForm::begin([\n    'enableAjaxValidation'      =&gt; true,\n    'enableClientValidation'    =&gt; false,\n    'validateOnChange'          =&gt; false,\n    'validateOnSubmit'          =&gt; true,\n    'validateOnBlur'            =&gt; false,\n]);?&gt;\n\n&lt;?= $form-&gt;field($model, 'emails')-&gt;widget(MultipleInput::className(), [\n    'max' =&gt; 4,\n ]);\n?&gt;\n&lt;?= Html::submitButton('Update', ['class' =&gt; 'btn btn-success']);?&gt;\n&lt;?php ActiveForm::end();?&gt;\n</code></pre> <p>Options <code>max</code> means that a user is able to input only 4 emails</p> <p>For validation emails, you can use the following code</p> <pre><code>    /**\n     * Email validation.\n     *\n     * @param $attribute\n     */\n    public function validateEmails($attribute)\n    {\n        $items = $this-&gt;$attribute;\n\n        if (!is_array($items)) {\n            $items = [];\n        }\n\n        foreach ($items as $index =&gt; $item) {\n            $validator = new EmailValidator();\n            $error = null;\n            $validator-&gt;validate($item, $error);\n            if (!empty($error)) {\n                $key = $attribute . '[' . $index . ']';\n                $this-&gt;addError($key, $error);\n            }\n        }\n    }\n</code></pre>"},{"location":"usage/#multiple-columns","title":"Multiple columns","text":"<p>For example, you want to have an interface for manage a user schedule. For simplicity, we will store the schedule in json string.</p> <p>In this case, you can use <code>yii2-multiple-input</code> widget for supporting multiple inputs how to describe below.</p> <p>Our test model can look like as the following snippet</p> <pre><code>class ExampleModel extends Model\n{\n    public $schedule;\n\n    public function init()\n    {\n        parent::init();\n\n        $this-&gt;schedule = [\n            [\n                'day'       =&gt; '27.02.2015',\n                'user_id'   =&gt; 1,\n                'priority'  =&gt; 1\n            ],\n            [\n                'day'       =&gt; '27.02.2015',\n                'user_id'   =&gt; 2,\n                'priority'  =&gt; 2\n            ],\n        ];\n    }\n</code></pre> <p>Then we have to use <code>MultipleInput</code> widget for rendering form field in the view file</p> <pre><code>use yii\\bootstrap\\ActiveForm;\nuse unclead\\multipleinput\\MultipleInput;\nuse unclead\\multipleinput\\examples\\models\\ExampleModel;\nuse yii\\helpers\\Html;\n\n/* @var $this \\yii\\base\\View */\n/* @var $model ExampleModel */\n?&gt;\n\n&lt;?php $form = ActiveForm::begin([\n    'enableAjaxValidation'      =&gt; true,\n    'enableClientValidation'    =&gt; false,\n    'validateOnChange'          =&gt; false,\n    'validateOnSubmit'          =&gt; true,\n    'validateOnBlur'            =&gt; false,\n]);?&gt;\n\n&lt;?= $form-&gt;field($model, 'schedule')-&gt;widget(MultipleInput::className(), [\n    'max' =&gt; 4,\n    'columns' =&gt; [\n        [\n            'name'  =&gt; 'user_id',\n            'type'  =&gt; 'dropDownList',\n            'title' =&gt; 'User',\n            'defaultValue' =&gt; 1,\n            'items' =&gt; [\n                1 =&gt; 'User 1',\n                2 =&gt; 'User 2'\n            ]\n        ],\n        [\n            'name'  =&gt; 'day',\n            'type'  =&gt; \\kartik\\date\\DatePicker::className(),\n            'title' =&gt; 'Day',\n            'value' =&gt; function($data) {\n                return $data['day'];\n            },\n            'items' =&gt; [\n                '0' =&gt; 'Saturday',\n                '1' =&gt; 'Monday'\n            ],\n            'options' =&gt; [\n                'pluginOptions' =&gt; [\n                    'format' =&gt; 'dd.mm.yyyy',\n                    'todayHighlight' =&gt; true\n                ]\n            ]\n        ],\n        [\n            'name'  =&gt; 'priority',\n            'title' =&gt; 'Priority',\n            'enableError' =&gt; true,\n            'options' =&gt; [\n                'class' =&gt; 'input-priority'\n            ]\n        ]\n    ]\n ]);\n?&gt;\n&lt;?= Html::submitButton('Update', ['class' =&gt; 'btn btn-success']);?&gt;\n&lt;?php ActiveForm::end();?&gt;\n</code></pre> <p>For validation of the schedule you can use the following code</p> <pre><code>    public function validateSchedule($attribute)\n    {\n        $requiredValidator = new RequiredValidator();\n\n        foreach($this-&gt;$attribute as $index =&gt; $row) {\n            $error = null;\n            $requiredValidator-&gt;validate($row['priority'], $error);\n            if (!empty($error)) {\n                $key = $attribute . '[' . $index . '][priority]';\n                $this-&gt;addError($key, $error);\n            }\n        }\n    }\n</code></pre> <p>For example, you keep some data in json format in an attribute of a model. Imagine that it is an abstract user schedule with keys: user_id, day, priority</p> <p>On the edit page, you want to be able to manage this schedule and you can you yii2-multiple-input widget like in the following code</p> <pre><code>use unclead\\multipleinput\\MultipleInput;\n\n...\n\n&lt;?= $form-&gt;field($model, 'schedule')-&gt;widget(MultipleInput::className(), [\n    'max' =&gt; 4,\n    'columns' =&gt; [\n        [\n            'name'  =&gt; 'user_id',\n            'type'  =&gt; 'dropDownList',\n            'title' =&gt; 'User',\n            'defaultValue' =&gt; 1,\n            'items' =&gt; [\n                1 =&gt; 'User 1',\n                2 =&gt; 'User 2'\n            ]\n        ],\n        [\n            'name'  =&gt; 'day',\n            'type'  =&gt; \\kartik\\date\\DatePicker::className(),\n            'title' =&gt; 'Day',\n            'value' =&gt; function($data) {\n                return $data['day'];\n            },\n            'items' =&gt; [\n                '0' =&gt; 'Saturday',\n                '1' =&gt; 'Monday'\n            ],\n            'options' =&gt; [\n                'pluginOptions' =&gt; [\n                    'format' =&gt; 'dd.mm.yyyy',\n                    'todayHighlight' =&gt; true\n                ]\n            ],\n            'headerOptions' =&gt; [\n                'style' =&gt; 'width: 250px;',\n                'class' =&gt; 'day-css-class'\n            ]\n        ],\n        [\n            'name'  =&gt; 'priority',\n            'enableError' =&gt; true,\n            'title' =&gt; 'Priority',\n            'options' =&gt; [\n                'class' =&gt; 'input-priority'\n            ]\n        ],\n        [\n            'name'  =&gt; 'comment',\n            'type'  =&gt; 'static',\n            'value' =&gt; function($data) {\n                return Html::tag('span', 'static content', ['class' =&gt; 'label label-info']);\n            },\n            'headerOptions' =&gt; [\n                'style' =&gt; 'width: 70px;',\n            ]\n        ]\n    ]\n ]);\n?&gt;\n</code></pre>"},{"location":"usage/#tabular-input","title":"Tabular input","text":"<p>For example, you want to have an interface for manage some abstract items via tabular input.</p> <p>In this case, you can use <code>yii2-multiple-input</code> widget for supporting tabular input how to describe below.</p> <p>Our test model can look like as the following snippet</p> <pre><code>namespace unclead\\multipleinput\\examples\\models;\n\nuse Yii;\nuse yii\\base\\Model;\n// you have to install https://github.com/vova07/yii2-fileapi-widget\nuse vova07\\fileapi\\behaviors\\UploadBehavior;\n\n/**\n * Class Item\n * @package unclead\\multipleinput\\examples\\models\n */\nclass Item extends Model\n{\n    public $title;\n    public $description;\n    public $file;\n    public $date;\n\n    public function behaviors()\n    {\n        return [\n            'uploadBehavior' =&gt; [\n                'class' =&gt; UploadBehavior::className(),\n                'attributes' =&gt; [\n                    'file' =&gt; [\n                        'path' =&gt; Yii::getAlias('@webroot') . '/images/',\n                        'tempPath' =&gt; Yii::getAlias('@webroot') . '/images/tmp/',\n                        'url' =&gt; '/images/'\n                    ],\n                ]\n            ]\n        ];\n    }\n\n    public function rules()\n    {\n        return [\n            [['title', 'description'], 'required'],\n            ['file', 'safe']\n        ];\n    }\n}\n</code></pre> <p>Then we have to use <code>TabularInput</code> widget for rendering form field in the view file</p> <p>Since version 2.18.0 you can configure <code>columnOptions</code> also.</p> <pre><code>&lt;?php\n\nuse yii\\bootstrap\\ActiveForm;\nuse unclead\\multipleinput\\TabularInput;\nuse yii\\helpers\\Html;\nuse \\unclead\\multipleinput\\examples\\models\\Item;\n\n/* @var $this \\yii\\web\\View */\n/* @var $models Item[] */\n?&gt;\n\n&lt;?php $form = \\yii\\bootstrap\\ActiveForm::begin([\n    'id'                        =&gt; 'tabular-form',\n    'enableAjaxValidation'      =&gt; true,\n    'enableClientValidation'    =&gt; false,\n    'validateOnChange'          =&gt; false,\n    'validateOnSubmit'          =&gt; true,\n    'validateOnBlur'            =&gt; false,\n    'options' =&gt; [\n        'enctype' =&gt; 'multipart/form-data'\n    ]\n]) ?&gt;\n\n&lt;?= TabularInput::widget([\n    'models' =&gt; $models,\n    'attributeOptions' =&gt; [\n        'enableAjaxValidation'      =&gt; true,\n        'enableClientValidation'    =&gt; false,\n        'validateOnChange'          =&gt; false,\n        'validateOnSubmit'          =&gt; true,\n        'validateOnBlur'            =&gt; false,\n    ],\n    'columns' =&gt; [\n        [\n            'name'  =&gt; 'title',\n            'title' =&gt; 'Title',\n            'type'  =&gt; \\unclead\\multipleinput\\MultipleInputColumn::TYPE_TEXT_INPUT,\n        ],\n        [\n            'name'  =&gt; 'description',\n            'title' =&gt; 'Description',\n        ],\n        [\n            'name'  =&gt; 'file',\n            'title' =&gt; 'File',\n            'type'  =&gt; \\vova07\\fileapi\\Widget::className(),\n            'options' =&gt; [\n                'settings' =&gt; [\n                    'url' =&gt; ['site/fileapi-upload']\n                ]\n            ],\n            'columnOptions' =&gt; [\n                'style' =&gt; 'width: 250px;',\n                'class' =&gt; 'custom-css-class'\n            ]\n        ],\n        [\n            'name'  =&gt; 'date',\n            'type'  =&gt; \\kartik\\date\\DatePicker::className(),\n            'title' =&gt; 'Day',\n            'options' =&gt; [\n                'pluginOptions' =&gt; [\n                    'format' =&gt; 'dd.mm.yyyy',\n                    'todayHighlight' =&gt; true\n                ]\n            ],\n            'headerOptions' =&gt; [\n                'style' =&gt; 'width: 250px;',\n                'class' =&gt; 'day-css-class'\n            ]\n        ],\n    ],\n]) ?&gt;\n\n\n&lt;?= Html::submitButton('Update', ['class' =&gt; 'btn btn-success']);?&gt;\n&lt;?php ActiveForm::end();?&gt;\n</code></pre> <p>Your action can look like the following code</p> <pre><code>/**\n * Class TabularInputAction\n * @package unclead\\multipleinput\\examples\\actions\n */\nclass TabularInputAction extends Action\n{\n    public function run()\n    {\n        Yii::setAlias('@unclead-examples', realpath(__DIR__ . '/../'));\n\n        $models = [new Item()];\n        $request = Yii::$app-&gt;getRequest();\n        if ($request-&gt;isPost &amp;&amp; $request-&gt;post('ajax') !== null) {\n            $data = Yii::$app-&gt;request-&gt;post('Item', []);\n            foreach (array_keys($data) as $index) {\n                $models[$index] = new Item();\n            }\n            Model::loadMultiple($models, Yii::$app-&gt;request-&gt;post());\n            Yii::$app-&gt;response-&gt;format = Response::FORMAT_JSON;\n            $result = ActiveForm::validateMultiple($models);\n            return $result;\n        }\n\n        if (Model::loadMultiple($models, Yii::$app-&gt;request-&gt;post())) {\n            // your magic\n        }\n\n\n        return $this-&gt;controller-&gt;render('@unclead-examples/views/tabular-input.php', ['models' =&gt; $models]);\n    }\n}\n</code></pre>"}]}